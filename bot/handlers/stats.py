from bot.utils.database import execute_query


async def stats(update, context):
    try:
        selected_user = context.user_data.get('selected_user')
        if selected_user is None:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é /select_user.")
            return

        total_income = execute_query(
            "SELECT COALESCE(SUM(amount), 0) FROM transactions WHERE user_id = %s AND type = '–¥–æ—Ö–æ–¥'",
            (selected_user,),
            fetchone=True
        )[0]

        total_expense = execute_query(
            "SELECT COALESCE(SUM(amount), 0) FROM transactions WHERE user_id = %s AND type = '—Ä–∞—Å—Ö–æ–¥'",
            (selected_user,),
            fetchone=True
        )[0]

        categories = execute_query(
            "SELECT category, SUM(amount) FROM transactions WHERE user_id = %s GROUP BY category",
            (selected_user,),
            fetchall=True
        )

        response = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
            f"üíµ *–û–±—â–∏–π –¥–æ—Ö–æ–¥:* {total_income:.2f}\n"
            f"üí∏ *–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:* {total_expense:.2f}\n\n"
            "üìÇ *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
        )

        for category, amount in categories:
            response += f"- {category}: {amount:.2f}\n"

        await update.message.reply_text(response, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
